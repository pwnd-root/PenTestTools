#!/usr/bin/env python3
"""
Title: targetScan.py
Author: pwnd_root
Description: Scans the target for open ports and then runs a deeper scan based on scan specifications.
             The port scan results will be written to portScan.txt and deeper scan results will be written to
             deepScan.txt. Uses the nmap tool and ssytem command execution rather than the nmap python library.
             (Hoping to add more recon features in the future)
"""
# import calls
import argparse
import re
import subprocess
import sys

pScan = "portScan.txt"
dScan = "deepScan.txt"
openPorts = []
filteredPorts = []


def getArgs ():

    parser = argparse.ArgumentParser(description= "NMAP complete scan")
    parser.add_argument ("target", action = "store", help = "Target IP address", type = str)
    parser.add_argument ("-t", action = "store", help = "Transport Protocol to use- TCP/UDP. Default- T", type = str)
    parser.add_argument ("-f", action = "store_true", help = "Toggle full scan, all 65535 ports")
    parser.add_argument ("-p", action = "store", help = "Top ports to scan for. Default- 50 ports",
                         default = 50, type = int)
    parser.add_argument ("-v", action = "store_true", help = "Toggle vulnerability scan")

    args = parser.parse_args ()

    return args


def portScan (target, protocol, ports):

    print ("\033[33m" + "\t[+] Commencing ports scan" + "\033[30m")
    if protocol == 't':
        proto = '-sV'
    else:
        if not os.geteuid () == 0:
            print ("\033[31" + "[!]The scan type requires root privileges" + "\033[30m")
            sys.exit (1)
        proto = '-sU'
    scanResult = subprocess.run (['nmap', '-Pn', '-T4', '--min-rate=1000', proto, ports, target],
                                 stdout = subprocess.PIPE)
    # Writing scan results to portScan.txt
    with open (pScan, "w") as pFile:
        pFile.write (scanResult.stdout.decode())
    # Identifying open and filtered ports
    with open (pScan, "r") as pFile:
        for line in pFile.readlines ():
            if re.findall ("open", line):
                openPorts.append (line.split ('/')[0])
            if re.findall ("filtered", line):
                filteredPorts.append (line.split ('/')[0])

    print ("\033[34m" + "\t\t[+] Open Ports:\t" + (','.join(map(str, openPorts))) + "\033[30m")
    print ("\033[34m" + "\t\t[+] Filtered Ports:\t" + (','.join (map (str, filteredPorts))) + "\033[30m")
    print ("\033[32m" + "\t[+] Ports scan completed" + "\033[30m")

    return openPorts


def deepScan (target, protocol, openPorts, vuln):

    print ("\033[33m" + "\t[+] Commencing deep scan" + "\033[30m")
    if protocol == 't':
        proto = '-sV'
    else:
        if not os.geteuid () == 0:
            sys.exit (1)
        proto = '-sU'
    portStr = ','.join (map (str, openPorts))
    if vuln:
        scanResult = subprocess.run (['nmap', '-Pn', proto, '-sV', '-sC', '-A', '-p', portStr, '--script=vuln', target],
                                 stdout=subprocess.PIPE)
    else:
        scanResult = subprocess.run (['nmap', '-Pn', proto, '-sV', '-sC', '-A', '-p', portStr, target],
                                     stdout=subprocess.PIPE)
    # Writing scan results to deepScan.txt
    with open (dScan, "w") as dFile:
        dFile.write (scanResult.stdout.decode ())
    print ("\033[32m" + "\t[+] Ports Scanned" + "\033[30m")


def main ():

    vuln = False
    args = getArgs ()
    if args:
        target = args.target
        protocol = args.t
        if args.f:
            ports = "-p-"
        else:
            ports = "--top-ports=" + str(args.p)

        if args.v:
            vuln = True

        print ("\033[33m" + "[+] Commencing scan on\t" + target + "\033[30m")
        openPorts = portScan (target, protocol, ports)

        deepScan (target, protocol, openPorts, vuln)
        print ("\033[32m" + "[+] Scan completed. Result are written to corresponding files" + "\033[30m")


if __name__ == '__main__':

    main()
